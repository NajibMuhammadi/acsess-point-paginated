import jwt from "jsonwebtoken";
import { getStationsCollection } from "../config/db.js";

/**
 * üîê authStation ‚Äî middleware som skyddar station-endpoints
 * Verifierar JWT-token, h√§mtar station fr√•n DB och bifogar info till req
 */
export function authStation() {
    return async (req, res, next) => {
        try {
            // ========================
            // 1Ô∏è‚É£ L√§s token fr√•n header
            // ========================
            const authHeader = req.headers.authorization;
            console.log("üì© Incoming Authorization Header:", authHeader);

            if (!authHeader) {
                console.log("‚ùå Ingen Authorization-header");
                return res.status(401).json({ message: "Ingen token angiven" });
            }

            const token = authHeader.split(" ")[1]?.trim();
            if (!token) {
                console.log("‚ùå Ingen token efter 'Bearer'");
                return res.status(401).json({ message: "Ingen token angiven" });
            }

            // ========================
            // 2Ô∏è‚É£ Verifiera JWT
            // ========================
            let decoded;
            try {
                decoded = jwt.verify(token, process.env.JWT_SECRET);
                console.log("üîë JWT decoded:", decoded);
            } catch (jwtErr) {
                console.error("‚ùå JWT verify failed:", jwtErr.message);
                return res
                    .status(401)
                    .json({ message: "Token felaktig eller utg√•ngen" });
            }

            // ========================
            // 3Ô∏è‚É£ Kontrollera token-typ
            // ========================
            if (decoded.type !== "device" || !decoded.stationId) {
                console.log("‚ùå Ogiltig token-typ eller saknar stationId");
                return res.status(401).json({ message: "Ogiltig token" });
            }

            // ========================
            // 4Ô∏è‚É£ S√∂k station i DB
            // ========================
            const stationsCol = getStationsCollection();
            console.log(
                "üîç S√∂ker station i DB:",
                decoded.stationId,
                decoded.companyId
            );

            const station = await stationsCol.findOne({
                stationId: decoded.stationId.trim(),
                companyId: decoded.companyId.trim(),
                activeToken: token.trim(),
            });

            console.log("üß± Station hittad i DB:", station);

            if (!station) {
                console.log("‚ùå Ingen station hittades som matchar token");
                return res.status(401).json({
                    message: "Ogiltig eller utloggad session",
                });
            }

            // ========================
            // 5Ô∏è‚É£ Kontrollera godk√§nnande
            // ========================
            if (!station.isApproved) {
                console.log("üö´ Station inte l√§ngre godk√§nd");
                return res
                    .status(403)
                    .json({ message: "Stationen √§r inte l√§ngre godk√§nd" });
            }

            // ========================
            // 6Ô∏è‚É£ L√§gg till station-info till req
            // ========================
            req.companyId = decoded.companyId;
            req.stationId = decoded.stationId;
            req.station = station;

            console.log(
                `‚úÖ authStation OK ‚Üí ${decoded.stationId} (${decoded.companyId})`
            );

            next();
        } catch (err) {
            console.error("üî• authStation CRASH:", err);
            return res
                .status(500)
                .json({ message: "Internt fel i authStation" });
        }
    };
}
